{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/BokehShader2.js", "../../three/examples/jsm/cameras/CinematicCamera.js"],
  "sourcesContent": ["import {\n\tVector2\n} from 'three';\n\n/**\n * Depth-of-field shader with bokeh\n * ported from GLSL shader by Martins Upitis\n * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\n *\n * Requires #define RINGS and SAMPLES integers\n */\nconst BokehShader = {\n\n\tuniforms: {\n\n\t\t'textureWidth': { value: 1.0 },\n\t\t'textureHeight': { value: 1.0 },\n\n\t\t'focalDepth': { value: 1.0 },\n\t\t'focalLength': { value: 24.0 },\n\t\t'fstop': { value: 0.9 },\n\n\t\t'tColor': { value: null },\n\t\t'tDepth': { value: null },\n\n\t\t'maxblur': { value: 1.0 },\n\n\t\t'showFocus': { value: 0 },\n\t\t'manualdof': { value: 0 },\n\t\t'vignetting': { value: 0 },\n\t\t'depthblur': { value: 0 },\n\n\t\t'threshold': { value: 0.5 },\n\t\t'gain': { value: 2.0 },\n\t\t'bias': { value: 0.5 },\n\t\t'fringe': { value: 0.7 },\n\n\t\t'znear': { value: 0.1 },\n\t\t'zfar': { value: 100 },\n\n\t\t'noise': { value: 1 },\n\t\t'dithering': { value: 0.0001 },\n\t\t'pentagon': { value: 0 },\n\n\t\t'shaderFocus': { value: 1 },\n\t\t'focusCoords': { value: new Vector2() }\n\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\t#include <common>\n\n\t\tvarying vec2 vUv;\n\n\t\tuniform sampler2D tColor;\n\t\tuniform sampler2D tDepth;\n\t\tuniform float textureWidth;\n\t\tuniform float textureHeight;\n\n\t\tuniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\n\t\tuniform float focalLength; //focal length in mm\n\t\tuniform float fstop; //f-stop value\n\t\tuniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\n\n\t\t/*\n\t\tmake sure that these two values are the same for your camera, otherwise distances will be wrong.\n\t\t*/\n\n\t\tuniform float znear; // camera clipping start\n\t\tuniform float zfar; // camera clipping end\n\n\t\t//------------------------------------------\n\t\t//user variables\n\n\t\tconst int samples = SAMPLES; //samples on the first ring\n\t\tconst int rings = RINGS; //ring count\n\n\t\tconst int maxringsamples = rings * samples;\n\n\t\tuniform bool manualdof; // manual dof calculation\n\t\tfloat ndofstart = 1.0; // near dof blur start\n\t\tfloat ndofdist = 2.0; // near dof blur falloff distance\n\t\tfloat fdofstart = 1.0; // far dof blur start\n\t\tfloat fdofdist = 3.0; // far dof blur falloff distance\n\n\t\tfloat CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\n\n\t\tuniform bool vignetting; // use optical lens vignetting\n\n\t\tfloat vignout = 1.3; // vignetting outer border\n\t\tfloat vignin = 0.0; // vignetting inner border\n\t\tfloat vignfade = 22.0; // f-stops till vignete fades\n\n\t\tuniform bool shaderFocus;\n\t\t// disable if you use external focalDepth value\n\n\t\tuniform vec2 focusCoords;\n\t\t// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\n\t\t// if center of screen use vec2(0.5, 0.5);\n\n\t\tuniform float maxblur;\n\t\t//clamp value of max blur (0.0 = no blur, 1.0 default)\n\n\t\tuniform float threshold; // highlight threshold;\n\t\tuniform float gain; // highlight gain;\n\n\t\tuniform float bias; // bokeh edge bias\n\t\tuniform float fringe; // bokeh chromatic aberration / fringing\n\n\t\tuniform bool noise; //use noise instead of pattern for sample dithering\n\n\t\tuniform float dithering;\n\n\t\tuniform bool depthblur; // blur the depth buffer\n\t\tfloat dbsize = 1.25; // depth blur size\n\n\t\t/*\n\t\tnext part is experimental\n\t\tnot looking good with small sample and ring count\n\t\tlooks okay starting from samples = 4, rings = 4\n\t\t*/\n\n\t\tuniform bool pentagon; //use pentagon as bokeh shape?\n\t\tfloat feather = 0.4; //pentagon shape feather\n\n\t\t//------------------------------------------\n\n\t\tfloat penta(vec2 coords) {\n\t\t\t//pentagonal shape\n\t\t\tfloat scale = float(rings) - 1.3;\n\t\t\tvec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\n\t\t\tvec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\n\t\t\tvec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\n\t\t\tvec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\n\t\t\tvec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\n\t\t\tvec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\n\n\t\t\tvec4  one = vec4( 1.0 );\n\n\t\t\tvec4 P = vec4((coords),vec2(scale, scale));\n\n\t\t\tvec4 dist = vec4(0.0);\n\t\t\tfloat inorout = -4.0;\n\n\t\t\tdist.x = dot( P, HS0 );\n\t\t\tdist.y = dot( P, HS1 );\n\t\t\tdist.z = dot( P, HS2 );\n\t\t\tdist.w = dot( P, HS3 );\n\n\t\t\tdist = smoothstep( -feather, feather, dist );\n\n\t\t\tinorout += dot( dist, one );\n\n\t\t\tdist.x = dot( P, HS4 );\n\t\t\tdist.y = HS5.w - abs( P.z );\n\n\t\t\tdist = smoothstep( -feather, feather, dist );\n\t\t\tinorout += dist.x;\n\n\t\t\treturn clamp( inorout, 0.0, 1.0 );\n\t\t}\n\n\t\tfloat bdepth(vec2 coords) {\n\t\t\t// Depth buffer blur\n\t\t\tfloat d = 0.0;\n\t\t\tfloat kernel[9];\n\t\t\tvec2 offset[9];\n\n\t\t\tvec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\n\n\t\t\toffset[0] = vec2(-wh.x,-wh.y);\n\t\t\toffset[1] = vec2( 0.0, -wh.y);\n\t\t\toffset[2] = vec2( wh.x -wh.y);\n\n\t\t\toffset[3] = vec2(-wh.x,  0.0);\n\t\t\toffset[4] = vec2( 0.0,   0.0);\n\t\t\toffset[5] = vec2( wh.x,  0.0);\n\n\t\t\toffset[6] = vec2(-wh.x, wh.y);\n\t\t\toffset[7] = vec2( 0.0,  wh.y);\n\t\t\toffset[8] = vec2( wh.x, wh.y);\n\n\t\t\tkernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\n\t\t\tkernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\n\t\t\tkernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\n\n\n\t\t\tfor( int i=0; i<9; i++ ) {\n\t\t\t\tfloat tmp = texture2D(tDepth, coords + offset[i]).r;\n\t\t\t\td += tmp * kernel[i];\n\t\t\t}\n\n\t\t\treturn d;\n\t\t}\n\n\n\t\tvec3 color(vec2 coords,float blur) {\n\t\t\t//processing the sample\n\n\t\t\tvec3 col = vec3(0.0);\n\t\t\tvec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\n\n\t\t\tcol.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\n\t\t\tcol.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\n\t\t\tcol.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\n\n\t\t\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\n\t\t\tfloat lum = dot(col.rgb, lumcoeff);\n\t\t\tfloat thresh = max((lum-threshold)*gain, 0.0);\n\t\t\treturn col+mix(vec3(0.0),col,thresh*blur);\n\t\t}\n\n\t\tvec3 debugFocus(vec3 col, float blur, float depth) {\n\t\t\tfloat edge = 0.002*depth; //distance based edge smoothing\n\t\t\tfloat m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\n\t\t\tfloat e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\n\n\t\t\tcol = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\n\t\t\tcol = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\n\n\t\t\treturn col;\n\t\t}\n\n\t\tfloat linearize(float depth) {\n\t\t\treturn -zfar * znear / (depth * (zfar - znear) - zfar);\n\t\t}\n\n\t\tfloat vignette() {\n\t\t\tfloat dist = distance(vUv.xy, vec2(0.5,0.5));\n\t\t\tdist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\n\t\t\treturn clamp(dist,0.0,1.0);\n\t\t}\n\n\t\tfloat gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\n\t\t\tfloat rings2 = float(rings);\n\t\t\tfloat step = PI*2.0 / float(ringsamples);\n\t\t\tfloat pw = cos(j*step)*i;\n\t\t\tfloat ph = sin(j*step)*i;\n\t\t\tfloat p = 1.0;\n\t\t\tif (pentagon) {\n\t\t\t\tp = penta(vec2(pw,ph));\n\t\t\t}\n\t\t\tcol += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\n\t\t\treturn 1.0 * mix(1.0, i /rings2, bias) * p;\n\t\t}\n\n\t\tvoid main() {\n\t\t\t//scene depth calculation\n\n\t\t\tfloat depth = linearize(texture2D(tDepth,vUv.xy).x);\n\n\t\t\t// Blur depth?\n\t\t\tif ( depthblur ) {\n\t\t\t\tdepth = linearize(bdepth(vUv.xy));\n\t\t\t}\n\n\t\t\t//focal plane calculation\n\n\t\t\tfloat fDepth = focalDepth;\n\n\t\t\tif (shaderFocus) {\n\n\t\t\t\tfDepth = linearize(texture2D(tDepth,focusCoords).x);\n\n\t\t\t}\n\n\t\t\t// dof blur factor calculation\n\n\t\t\tfloat blur = 0.0;\n\n\t\t\tif (manualdof) {\n\t\t\t\tfloat a = depth-fDepth; // Focal plane\n\t\t\t\tfloat b = (a-fdofstart)/fdofdist; // Far DoF\n\t\t\t\tfloat c = (-a-ndofstart)/ndofdist; // Near Dof\n\t\t\t\tblur = (a>0.0) ? b : c;\n\t\t\t} else {\n\t\t\t\tfloat f = focalLength; // focal length in mm\n\t\t\t\tfloat d = fDepth*1000.0; // focal plane in mm\n\t\t\t\tfloat o = depth*1000.0; // depth in mm\n\n\t\t\t\tfloat a = (o*f)/(o-f);\n\t\t\t\tfloat b = (d*f)/(d-f);\n\t\t\t\tfloat c = (d-f)/(d*fstop*CoC);\n\n\t\t\t\tblur = abs(a-b)*c;\n\t\t\t}\n\n\t\t\tblur = clamp(blur,0.0,1.0);\n\n\t\t\t// calculation of pattern for dithering\n\n\t\t\tvec2 noise = vec2(rand(vUv.xy), rand( vUv.xy + vec2( 0.4, 0.6 ) ) )*dithering*blur;\n\n\t\t\t// getting blur x and y step factor\n\n\t\t\tfloat w = (1.0/textureWidth)*blur*maxblur+noise.x;\n\t\t\tfloat h = (1.0/textureHeight)*blur*maxblur+noise.y;\n\n\t\t\t// calculation of final color\n\n\t\t\tvec3 col = vec3(0.0);\n\n\t\t\tif(blur < 0.05) {\n\t\t\t\t//some optimization thingy\n\t\t\t\tcol = texture2D(tColor, vUv.xy).rgb;\n\t\t\t} else {\n\t\t\t\tcol = texture2D(tColor, vUv.xy).rgb;\n\t\t\t\tfloat s = 1.0;\n\t\t\t\tint ringsamples;\n\n\t\t\t\tfor (int i = 1; i <= rings; i++) {\n\t\t\t\t\t/*unboxstart*/\n\t\t\t\t\tringsamples = i * samples;\n\n\t\t\t\t\tfor (int j = 0 ; j < maxringsamples ; j++) {\n\t\t\t\t\t\tif (j >= ringsamples) break;\n\t\t\t\t\t\ts += gather(float(i), float(j), ringsamples, col, w, h, blur);\n\t\t\t\t\t}\n\t\t\t\t\t/*unboxend*/\n\t\t\t\t}\n\n\t\t\t\tcol /= s; //divide by sample count\n\t\t\t}\n\n\t\t\tif (showFocus) {\n\t\t\t\tcol = debugFocus(col, blur, depth);\n\t\t\t}\n\n\t\t\tif (vignetting) {\n\t\t\t\tcol *= vignette();\n\t\t\t}\n\n\t\t\tgl_FragColor.rgb = col;\n\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t}`\n\n};\n\nconst BokehDepthShader = {\n\n\tuniforms: {\n\n\t\t'mNear': { value: 1.0 },\n\t\t'mFar': { value: 1000.0 },\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying float vViewZDepth;\n\n\t\tvoid main() {\n\n\t\t\t#include <begin_vertex>\n\t\t\t#include <project_vertex>\n\n\t\t\tvViewZDepth = - mvPosition.z;\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float mNear;\n\t\tuniform float mFar;\n\n\t\tvarying float vViewZDepth;\n\n\t\tvoid main() {\n\n\t\t\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\n\t\t\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\n\t\t}`\n\n};\n\nexport { BokehShader, BokehDepthShader };\n", "import {\n\tMesh,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPlaneGeometry,\n\tScene,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\n\nimport { BokehShader, BokehDepthShader } from '../shaders/BokehShader2.js';\n\nclass CinematicCamera extends PerspectiveCamera {\n\n\tconstructor( fov, aspect, near, far ) {\n\n\t\tsuper( fov, aspect, near, far );\n\n\t\tthis.type = 'CinematicCamera';\n\n\t\tthis.postprocessing = { enabled: true };\n\t\tthis.shaderSettings = {\n\t\t\trings: 3,\n\t\t\tsamples: 4\n\t\t};\n\n\t\tconst depthShader = BokehDepthShader;\n\n\t\tthis.materialDepth = new ShaderMaterial( {\n\t\t\tuniforms: depthShader.uniforms,\n\t\t\tvertexShader: depthShader.vertexShader,\n\t\t\tfragmentShader: depthShader.fragmentShader\n\t\t} );\n\n\t\tthis.materialDepth.uniforms[ 'mNear' ].value = near;\n\t\tthis.materialDepth.uniforms[ 'mFar' ].value = far;\n\n\t\t// In case of cinematicCamera, having a default lens set is important\n\t\tthis.setLens();\n\n\t\tthis.initPostProcessing();\n\n\t}\n\n\t// providing fnumber and coc(Circle of Confusion) as extra arguments\n\t// In case of cinematicCamera, having a default lens set is important\n\t// if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n\tsetLens( focalLength = 35, filmGauge = 35, fNumber = 8, coc = 0.019 ) {\n\n\t\tthis.filmGauge = filmGauge;\n\n\t\tthis.setFocalLength( focalLength );\n\n\t\tthis.fNumber = fNumber;\n\t\tthis.coc = coc;\n\n\t\t// fNumber is focalLength by aperture\n\t\tthis.aperture = focalLength / this.fNumber;\n\n\t\t// hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n\t\tthis.hyperFocal = ( focalLength * focalLength ) / ( this.aperture * this.coc );\n\n\t}\n\n\tlinearize( depth ) {\n\n\t\tconst zfar = this.far;\n\t\tconst znear = this.near;\n\t\treturn - zfar * znear / ( depth * ( zfar - znear ) - zfar );\n\n\t}\n\n\tsmoothstep( near, far, depth ) {\n\n\t\tconst x = this.saturate( ( depth - near ) / ( far - near ) );\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t}\n\n\tsaturate( x ) {\n\n\t\treturn Math.max( 0, Math.min( 1, x ) );\n\n\t}\n\n\t// function for focusing at a distance from the camera\n\tfocusAt( focusDistance = 20 ) {\n\n\t\tconst focalLength = this.getFocalLength();\n\n\t\t// distance from the camera (normal to frustrum) to focus on\n\t\tthis.focus = focusDistance;\n\n\t\t// the nearest point from the camera which is in focus (unused)\n\t\tthis.nearPoint = ( this.hyperFocal * this.focus ) / ( this.hyperFocal + ( this.focus - focalLength ) );\n\n\t\t// the farthest point from the camera which is in focus (unused)\n\t\tthis.farPoint = ( this.hyperFocal * this.focus ) / ( this.hyperFocal - ( this.focus - focalLength ) );\n\n\t\t// the gap or width of the space in which is everything is in focus (unused)\n\t\tthis.depthOfField = this.farPoint - this.nearPoint;\n\n\t\t// Considering minimum distance of focus for a standard lens (unused)\n\t\tif ( this.depthOfField < 0 ) this.depthOfField = 0;\n\n\t\tthis.sdistance = this.smoothstep( this.near, this.far, this.focus );\n\n\t\tthis.ldistance = this.linearize( 1 -\tthis.sdistance );\n\n\t\tthis.postprocessing.bokeh_uniforms[ 'focalDepth' ].value = this.ldistance;\n\n\t}\n\n\tinitPostProcessing() {\n\n\t\tif ( this.postprocessing.enabled ) {\n\n\t\t\tthis.postprocessing.scene = new Scene();\n\n\t\t\tthis.postprocessing.camera = new OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2,\twindow.innerHeight / 2, window.innerHeight / - 2, - 10000, 10000 );\n\n\t\t\tthis.postprocessing.scene.add( this.postprocessing.camera );\n\n\t\t\tthis.postprocessing.rtTextureDepth = new WebGLRenderTarget( window.innerWidth, window.innerHeight );\n\t\t\tthis.postprocessing.rtTextureColor = new WebGLRenderTarget( window.innerWidth, window.innerHeight );\n\n\t\t\tconst bokeh_shader = BokehShader;\n\n\t\t\tthis.postprocessing.bokeh_uniforms = UniformsUtils.clone( bokeh_shader.uniforms );\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'tColor' ].value = this.postprocessing.rtTextureColor.texture;\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'tDepth' ].value = this.postprocessing.rtTextureDepth.texture;\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'manualdof' ].value = 0;\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'shaderFocus' ].value = 0;\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'fstop' ].value = 2.8;\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'showFocus' ].value = 1;\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'focalDepth' ].value = 0.1;\n\n\t\t\t//console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'znear' ].value = this.near;\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'zfar' ].value = this.near;\n\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'textureWidth' ].value = window.innerWidth;\n\n\t\t\tthis.postprocessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight;\n\n\t\t\tthis.postprocessing.materialBokeh = new ShaderMaterial( {\n\t\t\t\tuniforms: this.postprocessing.bokeh_uniforms,\n\t\t\t\tvertexShader: bokeh_shader.vertexShader,\n\t\t\t\tfragmentShader: bokeh_shader.fragmentShader,\n\t\t\t\tdefines: {\n\t\t\t\t\tRINGS: this.shaderSettings.rings,\n\t\t\t\t\tSAMPLES: this.shaderSettings.samples,\n\t\t\t\t\tDEPTH_PACKING: 1\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.postprocessing.quad = new Mesh( new PlaneGeometry( window.innerWidth, window.innerHeight ), this.postprocessing.materialBokeh );\n\t\t\tthis.postprocessing.quad.position.z = - 500;\n\t\t\tthis.postprocessing.scene.add( this.postprocessing.quad );\n\n\t\t}\n\n\t}\n\n\trenderCinematic( scene, renderer ) {\n\n\t\tif ( this.postprocessing.enabled ) {\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\trenderer.clear();\n\n\t\t\t// Render scene into texture\n\n\t\t\tscene.overrideMaterial = null;\n\t\t\trenderer.setRenderTarget( this.postprocessing.rtTextureColor );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, this );\n\n\t\t\t// Render depth into texture\n\n\t\t\tscene.overrideMaterial = this.materialDepth;\n\t\t\trenderer.setRenderTarget( this.postprocessing.rtTextureDepth );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, this );\n\n\t\t\t// Render bokeh composite\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( this.postprocessing.scene, this.postprocessing.camera );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t}\n\n\t}\n\n}\n\nexport { CinematicCamera };\n"],
  "mappings": "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",
  "names": []
}
